# coding: utf-8
# ----------------------------------------------------------------------------------
# 2023/4/17 更新

#* 流れ  【非同期処理して並列処理】検索ワードを含んだURLにて検索→サイトを開く→解析→ブランド名、商品名、価格のリスト作成→バイナリデータへ保存→保存されてるバイナリデータ（保存した過去データ）を復元→現在のデータと突き合わせる→今までと違うものをリスト化→通知する
# ----------------------------------------------------------------------------------
import os, time


# 自作モジュール
from spreadsheet_read import SpreadsheetRead
from method.utils import Logger, NoneChecker
# ----------------------------------------------------------------------------------
####################################################################################
# 一連の流れ

class Flow:
    def __init__(self, sheet_url, brand_id, index, debug_mode=False):
        self.sheet_url = sheet_url
        self.brand_id = brand_id
        self.index = index
        self.logger = self.setup_logger(debug_mode=debug_mode)

        # インスタンス
        self.read = SpreadsheetRead(sheet_url=self.sheet_url, brand_id=self.brand_id, index=self.index)


####################################################################################
# ----------------------------------------------------------------------------------

# Loggerセットアップ

    def setup_logger(self, debug_mode=False):
        debug_mode = os.getenv('DEBUG_MODE', 'False') == 'True'
        logger_instance = Logger(__name__, debug_mode=debug_mode)
        return logger_instance.get_logger()


# ----------------------------------------------------------------------------------
# スプシから「ブランド名」を読み込む

    def get_name(self, field_name='get_name'):
        self.logger.debug(f"***** {field_name} 開始*****")

        id = self.read.get_id(
            name='ブランド名',
            field_name=field_name
        )

        return id

        self.logger.debug(f"***** {field_name} 終了*****")


# ----------------------------------------------------------------------------------
# スプシから「URL」を読み込む

    def get_url(self, field_name='get_url'):
        self.logger.debug(f"***** {field_name} 開始*****")

        url = self.read.get_url(
            url='サイトURL',
            field_name=field_name
        )

        return url

        self.logger.debug(f"***** {field_name} 終了*****")


# ----------------------------------------------------------------------------------
#todo サイトを開く
# 専用のURLを使う
# 画面領域は広く取る
# 新着順に並び替える

# ----------------------------------------------------------------------------------
#todo 商品のリスト読み込む
# ブランド名（各メソッドに埋め込めるようにする）
# ジャンル
# 商品状態
# DataFrameにして比較できるようにする





# ----------------------------------------------------------------------------------
#todo 過去のバイナリデータを読み込む
# バイナリデータを読み込むクラスを作成
# バイナリデータをdfにして比較できるようにする




# ----------------------------------------------------------------------------------
#todo 比較して「過去のデータにない商品」を真偽値で示す
# 真偽値にてFalseだった場合には処理を終了



# ----------------------------------------------------------------------------------
#todo 比較して「過去のデータにない商品」をピックアップする




# ----------------------------------------------------------------------------------
#todo 最新のデータをバイナリデータで保存




# ----------------------------------------------------------------------------------
#todo 新着商品がある場合に通知




# ----------------------------------------------------------------------------------
#todo 各メソッドをまとめる

    def process(self, ):
        self.logger.debug(f"***** Flow.process 開始 *****")

        self.get_name()
        self.get_url()



        self.logger.debug(f"***** Flow.process 終了 *****")



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# テスト実施

if __name__ == '__main__':
    test_flow = Flow()
    test_flow.process()
